<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>openSUSE Lizards</title>
	<atom:link href="https://lizards.opensuse.org/feed/" rel="self" type="application/rss+xml" />
	<link>https://lizards.opensuse.org</link>
	<description>Blogs and Ramblings of the openSUSE Members</description>
	<lastBuildDate>Tue, 07 Jun 2016 10:15:48 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.4.2</generator>
	<item>
		<title>Highlights of YaST development sprint 20</title>
		<link>https://lizards.opensuse.org/2016/06/07/highlights-of-yast-development-sprint-20/</link>
		<comments>https://lizards.opensuse.org/2016/06/07/highlights-of-yast-development-sprint-20/#comments</comments>
		<pubDate>Tue, 07 Jun 2016 10:15:48 +0000</pubDate>
		<dc:creator><![CDATA[Yast Team]]></dc:creator>
				<category><![CDATA[Distribution]]></category>
		<category><![CDATA[Factory]]></category>
		<category><![CDATA[Programming]]></category>
		<category><![CDATA[Systems Management]]></category>
		<category><![CDATA[YaST]]></category>

		<guid isPermaLink="false">http://lizards.opensuse.org/?p=11853</guid>
		<description><![CDATA[The latest Scrum sprint of the YaST team was shorter than the average three weeks and also a little bit &#8220;under-powered&#8221; with more people on vacation or sick leave than usual. The bright side of shorter sprints is that you don&#8217;t have to wait three full weeks to get an update on the status. Here [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>The latest Scrum sprint of the YaST team was shorter than the average three weeks and also a little bit &#8220;under-powered&#8221; with more people on vacation or sick leave than usual. The bright side of shorter sprints is that you don&#8217;t have to wait three full weeks to get an update on the status. Here you have it!</p>
<h3>Debugger in the installer</h3>
<p>Until now debugging the YaST installation was usually done by checking the logs. If you needed more details you would add more log calls. This is inconvenient and takes too much time but, as every Ruby developer know, there is a better way. </p>
<p>Being a fully interpreted and highly introspective language, Ruby offers the possibility of simply intercept the execution of the program and open a interpreter in which is not only possible to inspect the status of the execution, but to take full control of it. </p>
<p>From now on, you can access those unbeatable debugging capabilities during the installation. All you have to do is boot the installer with <code>Y2DEBUGGER=1</code>.</p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/06/debugger_session.png" rel="attachment wp-att-11869"><img src="//lizards.opensuse.org/wp-content/uploads/2016/06/debugger_session-300x225.png" alt="Debugger during installation" width="300" height="225" class="aligncenter size-medium wp-image-11869" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/06/debugger_session-300x225.png 300w, http://lizards.opensuse.org/wp-content/uploads/2016/06/debugger_session-768x576.png 768w, http://lizards.opensuse.org/wp-content/uploads/2016/06/debugger_session.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>Moreover the same mechanism is also available when running YaST in a installed system. Just make sure the rubygem-byebug package is installed and start the YaST module like this:</p>
<p><code>Y2DEBUGGER=1 yast2 &lt;client&gt;</code></p>
<p>For more details see the <a href="http://yastgithubio.readthedocs.io/en/latest/debugging/">brand new documentation</a>. You can also see several examples and screenshots of the debugger running in text mode, through the network and in other scenarios in the description of <a href="https://github.com/yast/yast-installation/pull/379">the corresponding pull request</a>.</p>
<h3>Interface improvements for SSH host keys importing</h3>
<p>Most software enthusiasts and developers, specially free software lovers, will know the mantra &#8220;<i>release early, release often</i>&#8220;. The earlier you allow your users and contributors to put their eyes and hands on your software, the better feedback you will get in return. And that proved to be true one more time with YaST and the awesome openSUSE community.</p>
<p>In the <a href="https://lizards.opensuse.org/?p=11822">previous post</a> we introduced a new functionality being added to YaST2 &#8211; more explicit and interactive importing of SSH host keys. Some users quickly spotted some usability problems, right in time for the fixes to be planned for this sprint.</p>
<p>In the description of <a href="https://github.com/yast/yast-installation/pull/382">this pull request</a> you can see several screenshots of the new interface in several situations, with the new main dialog looking like this.</p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/06/sshimport2.png" rel="attachment wp-att-11871"><img src="//lizards.opensuse.org/wp-content/uploads/2016/06/sshimport2-300x225.png" alt="New dialog for SSH keys importing" width="300" height="225" class="aligncenter size-medium wp-image-11871" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/06/sshimport2-300x225.png 300w, http://lizards.opensuse.org/wp-content/uploads/2016/06/sshimport2-768x576.png 768w, http://lizards.opensuse.org/wp-content/uploads/2016/06/sshimport2.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>Iterative development rocks when you have involved users. Keep the constructive criticism!</p>
<h3>AutoYaST support for SSH host keys importing</h3>
<p>The user interface was not the only aspect of SSH host keys importing that got improved. For every feature we add to the interactive installer, we always take care of making it accessible from AutoYaST as well. Thus, an AutoYaST profile file can now contain a section like this to control the behavior of the new functionality.<br />
<code><br />
&lt;ssh_import&gt;<br />
&nbsp;&nbsp;&lt;import config:type="boolean"&gt;true&lt;/import&gt;<br />
&nbsp;&nbsp;&lt;copy_config config:type="boolean"&gt;true&lt;/copy_config&gt;<br />
&nbsp;&nbsp;&lt;device&gt;/dev/sda2&lt;/device&gt;<br />
&lt;/ssh_import&gt;<br />
</code></p>
<h3>Firewalld support in YaST2-Firewall</h3>
<p>Another success story about collaboration in the YaST world. In the <a href="https://lizards.opensuse.org/2016/05/02/highlights-of-yast-development-sprint-18/">report about sprint 18</a> we mentioned we had received some contributions in order to add Firewalld support to YaST2-Firewall and that we were collaborating with the authors of those patches to get the whole thing merged in Tumbleweed. After a couple of sprints allocating some time to keep that ball rolling, we can happily announce that YaST2-Firewall in Tumbleweed already supports the &#8220;classic&#8221; SUSEFirewall2 backend and the brand new Firewalld one!</p>
<h3>Support for vncmanager 3</h3>
<p>SUSE&#8217;s VNC guru Michal Srb has been working lately in improving the ability to share and reconnect to VNC sessions. Until now, YaST always created a new separate VNC session for every client and closed the session when the client disconnected. There was no simple way to share the session with additional clients or to keep it running after disconnecting.</p>
<p>Now, thanks to Michal, the remote module can be set up in three different VNC modes: disabled, xinetd and vncmanager. Check the definition of each mode in the description <a href="https://github.com/yast/yast-network/pull/401">of the pull request</a>.</p>
<h3>New registration UI</h3>
<p><a href="https://lizards.opensuse.org/2016/02/03/highlights-of-development-sprint-14/">Six sprints ago</a>, the &#8220;Local User&#8221; screen got <a href="https://github.com/yast/yast-users/pull/84">some love</a> and the UI was greatly improved. During this sprint, and according to <a href="https://bugzilla.suse.com/show_bug.cgi?id=974626">bug #974626</a>, we have improved the registration UI to make it consistent with the &#8220;Local User&#8221; screen.</p>
<p>The old interface, displayed below, was pretty confusing. Although it was not obvious at first sight, it offered three options:
</p>
<ol>
<li>Register the system using scc.suse.com by introducing an e-mail and a registration code.</li>
<li>Register the system using a local SMT server (no e-mail or registration code are used).</li>
<li>Skip the registration step.</li>
</ol>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/06/reg-old.png" rel="attachment wp-att-11854"><img src="//lizards.opensuse.org/wp-content/uploads/2016/06/reg-old-300x225.png" alt="Old registration UI" width="300" height="225" class="aligncenter size-medium wp-image-11854" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/06/reg-old-300x225.png 300w, http://lizards.opensuse.org/wp-content/uploads/2016/06/reg-old-768x576.png 768w, http://lizards.opensuse.org/wp-content/uploads/2016/06/reg-old.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>Options 1 and 2 are mutually exclusive but, if you look at the interface, that fact is not clear. Moreover, we wanted this dialog to be consistent with the new &#8220;Local User&#8221; one.</p>
<p>The new dialog looks like this, with the three mutually exclusive options being directly presented to the user.</p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/06/reg-new.png" rel="attachment wp-att-11856"><img src="//lizards.opensuse.org/wp-content/uploads/2016/06/reg-new-300x225.png" alt="New Registration UI" width="300" height="225" class="aligncenter size-medium wp-image-11856" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/06/reg-new-300x225.png 300w, http://lizards.opensuse.org/wp-content/uploads/2016/06/reg-new-768x576.png 768w, http://lizards.opensuse.org/wp-content/uploads/2016/06/reg-new.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>As always, redesigning a UI in YaST implies making sure it works nicely in the NCurses interface with screens with a resolution of 80 columns and 25 lines of text. Doesn&#8217;t it look nice (provided the reader has a geeky aesthetic sense)?</p>
<p><img style="max-width:100%" alt="Text-based Registration UI" src="//lizards.opensuse.org/wp-content/uploads/2016/06/reg-curses.png" /></p>
<h3>Progress in the new storage layer</h3>
<p>As usual, progress goes steady in the rewrite of the storage layer. In this sprint we invested some time into the partitioning proposal, which is now able to propose a good layout in some very complex scenarios with highly fragmented disks with limited partition schemas.</p>
<p>In addition, preliminary support for LVM was added although is still far from being complete and full-featured.</p>
<h3>Will be back&#8230; very soon</h3>
<p>We always finish our reports saying something like &#8220;this was just a sample of all the work done, stay tuned for another report in three weeks&#8221;. But the weeks ahead will be a little bit unusual. This week a SUSE internal workshop is taking place. That means that many YaST developers are focusing on stuff different from their daily duty. In addition, <a href="https://events.opensuse.org/conference/oSC16">openSUSE Conference&#8217;16</a> and <a href="https://hackweek.suse.com">Hackweek 14</a> are both round the corner. As a result of all those &#8220;distractions&#8221;, next sprint will be shorter than usual (just one week) and will not start immediately. Expect next report at some point close to the start of openSUSE Conference. By the way&#8230; see you there!</p>
]]></content:encoded>
			<wfw:commentRss>https://lizards.opensuse.org/2016/06/07/highlights-of-yast-development-sprint-20/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Highlights of YaST development sprint 19</title>
		<link>https://lizards.opensuse.org/2016/05/18/highlights-of-yast-development-sprint-19/</link>
		<comments>https://lizards.opensuse.org/2016/05/18/highlights-of-yast-development-sprint-19/#respond</comments>
		<pubDate>Wed, 18 May 2016 12:14:46 +0000</pubDate>
		<dc:creator><![CDATA[Yast Team]]></dc:creator>
				<category><![CDATA[Distribution]]></category>
		<category><![CDATA[Factory]]></category>
		<category><![CDATA[Programming]]></category>
		<category><![CDATA[Software Management]]></category>
		<category><![CDATA[Systems Management]]></category>
		<category><![CDATA[YaST]]></category>

		<guid isPermaLink="false">http://lizards.opensuse.org/?p=11822</guid>
		<description><![CDATA[Here we are after another Scrum sprint with our usual report about the activity in YaST development. Trusted boot YaST bootloader module got a new option, Trusted Boot (FATE#316553). It installs TrustedGRUB2 instead of the regular GRUB2. Trusted Boot means measuring the integrity of the boot process, with the help from the hardware (a TPM, [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Here we are after another Scrum sprint with our usual report about the activity in YaST development.</p>
<h3>Trusted boot</h3>
<p>YaST bootloader module got a new option, Trusted Boot (<a href="https://fate.suse.com/316553">FATE#316553</a>). It installs TrustedGRUB2 instead of the regular GRUB2.  Trusted Boot means measuring the integrity of the boot process, with the help from the hardware (a TPM, Trusted Platform Module, chip).</p>
<p>It enables some interesting things which we unfortunately haven&#8217;t provided out of the box. We give you a bootloader which measures the boot integrity and places the results in Platform Configuration Registers (PCRs).</p>
<p>First you need to make sure Trusted Boot is enabled in the BIOS setup (the setting is named Security / Security Chip on Thinkpads, for example). Then you can enable the new YaST Bootloader option that will install TrustedGRUB2.</p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/05/42c4377c-1b88-11e6-8287-236106b6f4d9.png" rel="attachment wp-att-11827"><img src="//lizards.opensuse.org/wp-content/uploads/2016/05/42c4377c-1b88-11e6-8287-236106b6f4d9-300x234.png" alt="Trusted boot in YaST Bootloader" width="300" height="234" class="aligncenter size-medium wp-image-11827" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/05/42c4377c-1b88-11e6-8287-236106b6f4d9-300x234.png 300w, http://lizards.opensuse.org/wp-content/uploads/2016/05/42c4377c-1b88-11e6-8287-236106b6f4d9-768x599.png 768w, http://lizards.opensuse.org/wp-content/uploads/2016/05/42c4377c-1b88-11e6-8287-236106b6f4d9.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>In the description of <a href="https://github.com/yast/yast-bootloader/pull/329">this pull request</a> you can find a more detailed explanation including some commands and hexadecimal dumps to check the result. Geek pr0n!</p>
<h3>SSH keys importing&#8230; and a glance at a YaST Developer&#8217;s life</h3>
<p>When looking at any software project, it&#8217;s common to find some feature or piece of code that is there due to the so-called &#8220;historical reasons&#8221;. YaST2 code-base has been around since 1999, adapting to changes and new requirements in a (almost literally) daily basis since then. That leads to a new level of heritage &#8211; the &#8220;prehistoric reasons&#8221;. Working in the YaST Team implies coding, debugging, testing&#8230; and archaeological research.</p>
<p>We got a <a href="https://bugzilla.opensuse.org/show_bug.cgi?id=956976">bug report</a> about the installer &#8220;stealing&#8221; some SSH host keys (but not all of them) from previously installed systems. It was actually the effect of a little-known YaST feature that can look surprising (not to say weird) at first sight. Ten years ago, somebody decided that when installing SUSE in a networked environment, where people use SSH to log in, it was better to import SSH keys from a previously installed Linux than to get that &#8220;ssh host key changed&#8221; for everybody who tries to connect. The rational was that forcing everybody to change the ~/.ssh/known_hosts file often could become a security breach, since people could get used to ignore the security warnings. Welcome to the world of historical reasons. <img src="https://lizards.opensuse.org/wp-includes/images/smilies/simple-smile.png" alt=":-)" class="wp-smiley" style="height: 1em; max-height: 1em;" /> Moreover, it was decided that the operation should be performed without showing any information to the users, in order to not confuse them.</p>
<p>More or less at the same time (we are still talking about 2006), it was decided to introduce importing of users from an existing system, this time with user interaction. The YaST developers decided that it would be fine to share some mechanisms in the implementation of both features. Another step into the historical reasons void.</p>
<p>Fast forward to the present. After several fate entries, bug reports and redesigns over the years, we decided to make the importing of SSH host keys more visible and usable, to make both functionalities (SSH import and users import) more independent and more clean and to take the first step to clean up the insanity introduced through the years (see <a href="https://features.opensuse.org/320873">fate#320873</a> for details).</p>
<p>The installer does not longer silently just import the SSH host keys from the most recent Linux installation on the disk (remember, you might have several distributions installed), it has now become a part of the installation proposal dialog:</p>
<p><img style="max-width:100%" alt="SSH host keys proposal" src="//lizards.opensuse.org/wp-content/uploads/2016/05/f93f82cc-1c19-11e6-95ae-0e7e82c22eb4.png" /></p>
<p>And from there you can change it:</p>
<p><img style="max-width:100%" alt="SSH host keys selection" src="//lizards.opensuse.org/wp-content/uploads/2016/05/08b01bfe-1c1a-11e6-84f8-ee8d5cd8c3ab.png" /></p>
<p>Notice that one of the options is &#8220;none&#8221;, so copying of previous keys is not longer enforced. In addition, now is also possible to import the rest of the SSH configuration in addition to the keys.</p>
<h3>Disabling local repositories</h3>
<p>When installing from a local media, like a CD/DVD or an USB stick, those sources were still enabled after the installation. It potentially could cause problems during software installation, upgrade, migration, etc. because an old or obsolete installation source is still there. On the other hand, if the source is physically removed (for instance, ejecting the CD/DVD), zypper will complain about that source not being available.</p>
<p>Fortunately, this behavior will change in future SUSE/openSUSE versions. Now, at the end of the installation, YaST will check every local source disabling those whose products are available also through a remote repository (so they&#8217;re not needed at all).</p>
<h3>Smart bonding with NPAR and SR-IOV interfaces</h3>
<p>Support for bonding interfaces with NPar or SR-IOV capabilities has also been improved during this sprint. Too many weird words in one sentence? Don&#8217;t worry, we actually love to explain things.</p>
<p>Bonding is a way to combine multiple network connections to increase the throughput and bandwidth and to provide redundancy. On the other hand, NPAR and SR-IOV are technologies that provide the capability to create multiple virtual devices from the same physical or ethernet port.</p>
<p>Until this sprint, YaST offered no way to know whether two interfaces with these capabilities were sharing the same physical port. As a result, users could bond them without realizing that they were not getting the desired effect in terms of redundancy.</p>
<p>Information about the physical port ID has been added to all the relevant dialogs for all devices supporting it, like it&#8217;s shown in the following screenshots.</p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/05/bonding1-1.png" rel="attachment wp-att-11835"><img src="//lizards.opensuse.org/wp-content/uploads/2016/05/bonding1-1-300x232.png" alt="Physical ports" width="300" height="232" class="aligncenter size-medium wp-image-11835" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/05/bonding1-1-300x232.png 300w, http://lizards.opensuse.org/wp-content/uploads/2016/05/bonding1-1.png 519w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/05/bonding2.png" rel="attachment wp-att-11834"><img src="//lizards.opensuse.org/wp-content/uploads/2016/05/bonding2-300x185.png" alt="More physical ports" width="300" height="185" class="aligncenter size-medium wp-image-11834" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/05/bonding2-300x185.png 300w, http://lizards.opensuse.org/wp-content/uploads/2016/05/bonding2.png 579w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>Additionally, the user will be alerted when trying to bond devices sharing the same physical port.</p>
<p><img class="aligncenter" style="max-width:100%" alt="Bonding warning" src="//lizards.opensuse.org/wp-content/uploads/2016/05/warning-1.png" /></p>
<p>Last but not least, following the Boy Scout Rule (also known as <a href="http://martinfowler.com/bliki/OpportunisticRefactoring.html">opportunistic refactoring</a>), we took the opportunity to fix some small quirks in YaST Network, like the counter-intuitive sorting of devices in some lists.</p>
<h3>Paying our debts: much better cleanup rules in Snapper</h3>
<p>Somebody said once &#8220;<i>a promise made is a debt unpaid</i>&#8220;. In the <a href="https://lizards.opensuse.org/?p=11800">previous post</a> we promised you all an article on Snapper.io detailing the new space-aware cleanup introduced in Snapper. <a href="http://snapper.io/2016/05/18/space-aware-cleanup.html">Here you are!</a></p>
<h3>That&#8217;s all folks</h3>
<p>Enough for a blog post. That&#8217;s of course not all we did during the last sprint (to the contrary, it&#8217;s just around 20% of the finished work according to the story points count) but, you know, we need to go back to hacking!</p>
]]></content:encoded>
			<wfw:commentRss>https://lizards.opensuse.org/2016/05/18/highlights-of-yast-development-sprint-19/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Highlights of YaST development sprint 18</title>
		<link>https://lizards.opensuse.org/2016/05/02/highlights-of-yast-development-sprint-18/</link>
		<comments>https://lizards.opensuse.org/2016/05/02/highlights-of-yast-development-sprint-18/#comments</comments>
		<pubDate>Mon, 02 May 2016 13:03:39 +0000</pubDate>
		<dc:creator><![CDATA[Yast Team]]></dc:creator>
				<category><![CDATA[Distribution]]></category>
		<category><![CDATA[Factory]]></category>
		<category><![CDATA[Programming]]></category>
		<category><![CDATA[Software Management]]></category>
		<category><![CDATA[Systems Management]]></category>
		<category><![CDATA[YaST]]></category>

		<guid isPermaLink="false">http://lizards.opensuse.org/?p=11800</guid>
		<description><![CDATA[The wait is over, the report of the latest Scrum sprint of the YaST Team is here! In the previous post we promised that after this sprint we would have much more to show&#8230; and now we do. This sprint was quite productive, so let&#8217;s go straight to the most interesting bits. More improvements in [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>The wait is over, the report of the latest Scrum sprint of the YaST Team is here! In the previous post we promised that after this sprint we would have much more to show&#8230; and now we do. This sprint was quite productive, so let&#8217;s go straight to the most interesting bits.</p>
<h3>More improvements in the self-update</h3>
<p>The YaST self-update feature mentioned in the two previous blog posts (<a href="https://lizards.opensuse.org/?p=11748">sprint 16</a> and <a href="https://lizards.opensuse.org/?p=11777">sprint 17</a>) has also received a couple of improvements.</p>
<p>At <a href="https://gist.github.com/teclator/7bab6f4037992e66b1461e0696cf7f0a">this gist</a> (with screenshots) you can see some of the fixes done when going back and forward in the work-flow after an installer self-update.</p>
<p>But even more important are the improvements done in AutoYaST to properly handle the new feature. If you want to use your own self-update repository you have to specify it on the boot command line. This is easy in a single installation, but if you want to install many machines using AutoYaST then writing the possibly long URL at each installation again sounds annoying.</p>
<p>In this sprint we improved handling of the custom update URL so that it can be read from the AutoYaST XML profile. Now you need to write the custom URL only once into the profile and it will be used automatically in every AutoYaST installation.</p>
<p>There is not much to show in the UI, the log proves that the self update was really loaded.</p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/04/autoyast-self-update.png" rel="attachment wp-att-11805"><img src="//lizards.opensuse.org/wp-content/uploads/2016/04/autoyast-self-update-300x225.png" alt="AutoYaST self-update" width="300" height="225" class="aligncenter size-medium wp-image-11805" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/04/autoyast-self-update-300x225.png 300w, http://lizards.opensuse.org/wp-content/uploads/2016/04/autoyast-self-update-768x576.png 768w, http://lizards.opensuse.org/wp-content/uploads/2016/04/autoyast-self-update.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>You can find more details about specifying the URL in the profile and evaluating the self-update repository URL at the <a href="https://github.com/yast/yast-installation/blob/master/doc/SELF_UPDATE.md#where-to-find-the-updates">documentation</a>.</p>
<h3>Goodbye perl-Bootloader</h3>
<p>For quite some time, we have had the plan to stop using <a href="https://build.opensuse.org/package/show/openSUSE:Factory/perl-Bootloader">Perl-Bootloader</a> as library for yast2-Bootloader and finally we managed to make it happen. There were many reasons for this change.</p>
<p>From the user point of view, the most visible reasons were speed and size. Getting rid of Perl-Bootloader means that we not longer perform hardware probing twice (one for Perl-Bootloader and another one for <code>grub2-config</code>), making kernel updates faster. In addition, we are not only simplifying and reducing the size of yast2-bootloader itself. Dropping the Perl libraries and other associated dependencies, makes possible to have a smaller minimal system, something quite relevant in various environments and scenarios.</p>
<p>From the developer point of view, the main reason was to unify the used programming languages and also reuse existing solution for file reading and parsing. Now yast2-bootloader uses an <a href="http://augeas.net/">Augeas</a> file parser and serializer, which does not only allow us to have less code to maintain, but also offers smarter editing and better handling of the comments in the configuration files.</p>
<p>As nice side effects, this change also leaded to the removal of a lot of work-arounds, the simplification of the installation work-flow for bootloader and a very visible improvement in the source code quality. In addition, we improved the test coverage of the whole module to make sure we didn&#8217;t break things too much. But all those would be bold statements if we wouldn&#8217;t have some geeky numbers to prove then, so here they are.</p>
<ul>
<li>2945 lines of code added, 5963 removed (<a href="https://github.com/yast/yast-bootloader/compare/4d776...master">4d776&#8230;master</a>)
</li>
<li>Unit tests coverage raised <a href="https://coveralls.io/github/yast/yast-bootloader">from 69% to 81%</a>
</li>
<li>Code climate quality rating raised from <a href="https://codeclimate.com/github/yast/yast-bootloader/trends">1.73 to 3.31</a> (where 0 is the worst and 4 is the best)
</li>
</ul>
<p>Of course, after such a big rewrite is not unlikely that some new bugs will pop up, but we really believe the improvements are worth the price.</p>
<h3>Storage reimplementation: calculation of partition location</h3>
<p>For the <a href="https://build.opensuse.org/project/show/YaST:storage-ng">storage-ng</a> project we made a big step towards a modern system. We do not use geometries and cylinders for disks any longer. Instead we only use sectors.</p>
<p>The advantage for the user is much better control over the size of new partitions. Since so far the size had to be a multiple of the cylinder size, often 7.84 MiB, it was not possible to create very small partitions, e.g. for the <a href="https://en.wikipedia.org/wiki/BIOS_boot_partition">BIOS boot partition</a>. Also the size of partitions was usually not the exact number entered in YaST, e.g. 509.88 MiB instead of 512 MiB.</p>
<p>Now the size of partitions is as accurate as possible with the hardware, so usually a multiple of 512 B or 4 KiB.</p>
<p>Like in the past we also takes care of optimal partition alignment to avoid performance loss due to read-modify-write cycles.</p>
<h3>Snapper: much better cleanup rules</h3>
<p><a href="http://snapper.io/">Snapper</a> is a great tool, but the current default configuration usually causes it to be a little bit too greedy with disk space. During this sprint a new set of cleanup rules was implemented, allowing a much more reasonable usage of the disk.</p>
<p>The feature is already developed, submitted to Factory and even integrated into the next version of SUSE Enterprise that is right now being cooked. But, as you all know, the testing work-flow of openSUSE Tumbleweed (staging projects, openQA and so on) can sometimes cause some delay until the new feature appears in the distribution. As soon as the new feature reaches Tumbleweed, a blog post explaining the new functionality will be published at <a href="http://snapper.io/">snapper.io</a>. Stay tuned!</p>
<h3>Improved password protection for bootloader</h3>
<p>The password protection widget in YaST2-Bootloader had not been changed since the GRUB1 times, but GRUB2 allows more fine tunning of the password settings. In fact, it contains a whole user management system with multiple users that can have different permissions and different passwords. For YaST we like to keep things simple, so we support only password for &#8220;root&#8221; user. That was confusing for some people, so we decided to improve the user experience by adjusting some labels&#8230; and fixing some typos in the process. <img src="https://s.w.org/images/core/emoji/72x72/1f609.png" alt="&#x1f609;" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>Two pictures are worth a thousand words, so here you can see how the dialog looked before the change</p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/04/boot-password-old.png" rel="attachment wp-att-11803"><img src="//lizards.opensuse.org/wp-content/uploads/2016/04/boot-password-old-300x202.png" alt="BEFORE: boot password dialog" width="300" height="202" class="aligncenter size-medium wp-image-11803" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/04/boot-password-old-300x202.png 300w, http://lizards.opensuse.org/wp-content/uploads/2016/04/boot-password-old.png 642w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>and below the new appearance, which adds more explanation to the password specification. Of course, the help text (not displayed in the screenshots) was also improved to reflect the changes.</p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/04/boot-password-new.png" rel="attachment wp-att-11804"><img src="//lizards.opensuse.org/wp-content/uploads/2016/04/boot-password-new-300x203.png" alt="AFTER: boot password dialog" width="300" height="203" class="aligncenter size-medium wp-image-11804" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/04/boot-password-new-300x203.png 300w, http://lizards.opensuse.org/wp-content/uploads/2016/04/boot-password-new.png 642w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<h3>Handling of default product patterns</h3>
<p>The YaST installer implements several possibilities how the default patterns for the installed product should be specified. One of them is using <code>Recommends</code> RPM dependencies for the product package. (The other possibilities include <code>control.xml</code> file or the <code>content</code> file on the medium.)</p>
<p>The installer by default installs the recommended packages so the default patterns are automatically installed in the initial installation.</p>
<p>However, this approach makes troubles during system upgrade. If you remove some packages or patterns which are installed by default and then you do a system upgrade the installer will (silently) add the removed packages or patterns back as the <code>Recommends</code> dependencies will pull them in again.</p>
<p>The solution is to provide another mechanism for selecting the default patterns. The new implementation allows using a specific <code>Provides</code> RPM package tag which specifies the default pattern name for the product.</p>
<p>The new tag is <code>defaultpattern(pattern)</code> where &#8220;pattern&#8221; is the name of the default pattern. YaST looks for these specific tags and collects the pattern names for all installed or updated products. This step is skipped during package based system upgrade so this should avoid adding unnecessary packages in system upgrade.</p>
<p>Obviously it depends on the products themselves to switch from the RPM dependencies to this new style. So far it is supported only by the <em>SLES12 SP2 High Availability</em> addon.</p>
<p>See more details at <a href="https://github.com/yast/yast-packager/wiki/Selecting-the-default-product-patterns">https://github.com/yast/yast-packager/wiki/Selecting-the-default-product-patterns</a>.</p>
<h3>Storage reimplementation: another step closer to the perfect booting layout</h3>
<p>A <a href="https://lizards.opensuse.org/?p=11748">couple of reports ago</a> we made public our intention to squeeze some booting experts brains in order to create Ruby classes capable of always proposing a sensible partitioning schema. The delicious result is finally <a href="https://github.com/yast/yast-storage-ng/tree/master/src/lib/storage/boot_requirements_strategies">at the repository</a>, accompanied with a rather complete <a href="https://github.com/yast/yast-storage-ng/blob/master/doc/boot-partition.md">document explaining the logic</a> behind the code.</p>
<p>If reading Ruby code is not your thing but you are geeky enough, you can also review the <a href="http://paste.opensuse.org/78272293">output generated by the RSpec unit tests</a>, which shows how the new partitioning proposal will behave in all scenarios from the booting requirements point of view.</p>
<h3>Storage reimplementation: other improvements in the new proposal</h3>
<p>Apart from the already mentioned improvements in setting the boot-related partitions, the brand new partitioning proposal gained the ability of <em>shrinking Windows partitions</em> when needed (in a sensible and gentle way) and <em>reusing partitions that can be shared</em> with other installed systems, like swap of PReP. Even when sharing a swap partition is not possible and the proposal needs to delete an existing swap partitions to create a different one, it will take care of reusing the old label and UUID, so other systems in the same computer can still find a suitable swap for them even after changing the partitioning layout. Because we all can be better citizens&#8230;</p>
<p>In addition, we took the first steps to develop a smarter way of proposing a solid partitioning schema when the free space is split over several different disks or disk chunks. Is still a work in progress, but you can trust that in the future (open)SUSE will do a nice job when looking for a home for itself in your sparse hard disk space.</p>
<h3>Prevent wrong usage of LDL DASD disks in S/390 mainframes</h3>
<p>The management of storage devices in a Linux system running in a S/390 mainframe is a tricky topic full of corner cases. Depending on the type of disk, its format and other factors, some apparently simple operations (like creating partitions) are not possible. If you are interested in the subject and want to learn a lot of weird acronyms, we would recommend <a href="http://rhinstaller.github.io/blivet/blog/2015/06/s390/">this article</a>.</p>
<p>We realized that the expert partitioner allowed the user to specify some operations that were actually not supported, which resulted in the installation being aborted at a subsequent step. To avoid that situation, we improved the expert partitioner to detect those unsupported S/390 configurations and alert the user, like it&#8217;s shown in the screenshot below.</p>
<p><img style="max-width:100%" alt="LDL DADS popup" src="//lizards.opensuse.org/wp-content/uploads/2016/04/ldl_popup.png" /></p>
<h3>AutoYaST: moving network device renaming to first stage of installation</h3>
<p>We refactored the network module to unify the handling of device naming. Now AutoYaST assigns the naming udev rules in the 1st stage of the installation already. (yast2-network-3.1.147, autoyast2-3.1.121)</p>
<h3>New toys for the team</h3>
<p>We got a new server to run integration tests via openQA and <a href="https://github.com/yast/autoyast-integration-test">AutoYaST</a>.</p>
<p>The AutoYaST tests now used to take 8 hours but now finish in 1.5 hours.</p>
<h3>Collaboration with other (open)SUSE Teams</h3>
<p>Even though we call ourselves &#8220;the YaST team&#8221; we are happy to share the project with other teams in the company and people in the community. During this sprint, we had a chance to review code for two significant features.</p>
<p>The authentication client module, dealing with LDAP, Kerberos, Active Directory, NSS, PAM, and SSSD, got a big upgrade (yast2-auth-client-3.3.7).</p>
<p>Since a couple of months, Tumbleweed has had a package for <a href="http://www.firewalld.org/">firewalld</a> (see <a href="https://features.opensuse.org/318356">FATE#318356</a> ). Work is underway to make YaST aware of it but it has not been merged yet. If you are interested you will have to find it in the <a href="https://github.com/yast/yast-yast2">git repo</a>.</p>
<h3>In closing</h3>
<p>Definitely, this was a very productive sprint and, as usual, this report is just a sample of the total work delivered by the team. To be precise and to please number lovers, the features and fixes covered by this report represent 85 Scrum story points out of a total of 124 delivered ones. Hopefully enough to keep you entertained until the next report in about three weeks. See you then!</p>
]]></content:encoded>
			<wfw:commentRss>https://lizards.opensuse.org/2016/05/02/highlights-of-yast-development-sprint-18/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Highlights of development sprint 17</title>
		<link>https://lizards.opensuse.org/2016/04/06/highlights-of-development-sprint-17/</link>
		<comments>https://lizards.opensuse.org/2016/04/06/highlights-of-development-sprint-17/#respond</comments>
		<pubDate>Wed, 06 Apr 2016 14:21:03 +0000</pubDate>
		<dc:creator><![CDATA[Yast Team]]></dc:creator>
				<category><![CDATA[Distribution]]></category>
		<category><![CDATA[Factory]]></category>
		<category><![CDATA[Programming]]></category>
		<category><![CDATA[Systems Management]]></category>
		<category><![CDATA[YaST]]></category>

		<guid isPermaLink="false">http://lizards.opensuse.org/?p=11777</guid>
		<description><![CDATA[This is the fifth report since we started blogging about our development sprints and we have to admit that is the less impressive one so far. We probably underestimated the impact of the combination of Easters holidays and vacations of some team members. But although we were less productive than expected, we still have a [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>This is the fifth report since we started blogging about our development sprints and we have to admit that is the less impressive one so far. We probably underestimated the impact of the combination of Easters holidays and vacations of some team members.</p>
<p>But although we were less productive than expected, we still have a couple of cool things to show to our beloved users and fellow developers.</p>
<h3>Handling of file conflicts in packages</h3>
<p>Until now the package installation in YaST ignored possible file conflicts in the installed packages. In contrast <code>zypper</code> already supports that check for some time.</p>
<p>File conflicts happen when two packages attempt to install files with the same name but different contents. If such conflicting packages are installed the conflicting files will be replaced losing the previous content. The final file content will also depend on the installation order so some issues might look &#8220;random&#8221;. The package which file has been overwritten is actually broken.</p>
<p>YaST now displays a confirmation dialog which asks whether to continue with installation despite the conflicts or abort. Previously YaST silently continued with the package installation which could cause serious troubles later.</p>
<p><img style="max-width:100%" alt="File conflicts" src="https://cloud.githubusercontent.com/assets/907998/13957750/e11da630-f04d-11e5-94a5-ee8b7a67b0ce.gif"></p>
<p>File conflicts should normally not happen, at least when you use the original distribution repositories. The OBS build checks for some file conflicts during package build and if there really is a file conflict that it should be marked on the RPM level (so you should not be allowed to select the conflicting packages for installation at first place).</p>
<p>It is up to the user to decide whether it is OK to ignore the conflict or not. If the conflict is for example in a documentation file then ignoring the conflict is usually no problem, but if the conflict is in a binary file or in a system library then it is potentially risky. If you are not sure &#8220;Abort&#8221; is the safe choice here.</p>
<p>In the description of <a href="https://github.com/yast/yast-yast2/pull/452">this pull request</a> you can see several additional animations showcasing the new feature in a variety of interfaces (Qt, NCurses, command line) and scenarios (software manager, inline installation of extra packages).</p>
<h3>Improvements in the installer self-update</h3>
<p>During this sprint, the self-update feature has received several improvements and changes. The most important one is that now it uses libzypp to fetch the updates, delegating signatures checking and that kind of stuff. Obviously, it also means that installer updates will be distributed using regular RPM repositories (instead of Driver Update Disks).</p>
<p><img style="max-width:100%" alt="Self-Update installer - Unknown GPG" src="//lizards.opensuse.org/wp-content/uploads/2016/04/c7f519fc-fbda-11e5-9367-2e08dd186c1d.png" /></p>
<p>On the other hand, user&#8217;s driver updates (specified through <a href="https://en.opensuse.org/SDB:Linuxrc#p_dud">dud</a> option) will take precedence over installer updates. They will be applied by Linuxrc anyway, but they&#8217;ll remain on top of installer updates.</p>
<h3>Fun with Ruby and proxies</h3>
<p>This is not exactly a new feature or fix in YaST, but something we learned and we decided could be worth sharing in order to save headaches to other people.</p>
<p>We got a report about YaST ignoring the <code>no_proxy</code> setting in <code>/etc/sysconfig/proxy</code>. After some investigation, it turned out the problem was not in YaST but in the underlying tools, that are also implemented in Ruby. Looks like Ruby have an unexpected (by us, at least) behavior dealing with proxy settings. If you are interested in the details, don&#8217;t miss the information we collected in <a href="https://github.com/yast/yast-registration/wiki/Proxy-Configuration-Issues">this page in the YaST2-Registration wiki</a>, which includes some background and a set of recommendations to follow when setting <code>no_proxy</code>.</p>
<h3>Unification of network setup during installation</h3>
<p>As a result of the analysis about how the network settings affect different installation modes and steps, we unified the position and shortcuts of the &#8220;Network Setup&#8221; button. That affected three installation steps.</p>
<p>A button was added to &#8220;Add On Product&#8221; to avoid going back and forth just to setup some special configuration for some of our network interfaces.</p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/04/addon.png" rel="attachment wp-att-11791"><img src="//lizards.opensuse.org/wp-content/uploads/2016/04/addon-300x225.png" alt="Add On Product" width="300" height="225" class="aligncenter size-medium wp-image-11791" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/04/addon-300x225.png 300w, http://lizards.opensuse.org/wp-content/uploads/2016/04/addon-768x576.png 768w, http://lizards.opensuse.org/wp-content/uploads/2016/04/addon.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>In the &#8220;Disk Activation&#8221; step, the button was moved to the top-right corner to be consistent with other steps.</p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/04/disk_activation.png" rel="attachment wp-att-11792"><img src="//lizards.opensuse.org/wp-content/uploads/2016/04/disk_activation-300x225.png" alt="Disk Activation" width="300" height="225" class="aligncenter size-medium wp-image-11792" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/04/disk_activation-300x225.png 300w, http://lizards.opensuse.org/wp-content/uploads/2016/04/disk_activation-768x576.png 768w, http://lizards.opensuse.org/wp-content/uploads/2016/04/disk_activation.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>And to round off consistency we also adjusted the keyboard shortcut in the registration screen.</p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/04/registration.png" rel="attachment wp-att-11793"><img src="//lizards.opensuse.org/wp-content/uploads/2016/04/registration-300x225.png" alt="Registration" width="300" height="225" class="aligncenter size-medium wp-image-11793" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/04/registration-300x225.png 300w, http://lizards.opensuse.org/wp-content/uploads/2016/04/registration-768x576.png 768w, http://lizards.opensuse.org/wp-content/uploads/2016/04/registration.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<h3>New storage library keeps evolving</h3>
<p>This time we don&#8217;t have any big headline about the development of the new storage layer. We keep collaborating with experts in our attempt to ensure solid solutions for all situations. In addition to booting experts, the input from <a href="http://www.gnu.org/software/parted/">Parted</a> guru Petr Uzel was really valuable during this sprint. We took some important decisions about the integration of the new libstorage and libparted and we made progress in implementing a partitioning proposal that ensures a bootable system in all architectures and configurations, backed with highly readable tests and specs.</p>
<p>If time and bug reports permit, we&#8217;ll have much more to show after the next sprint&#8230; but that would be in three weeks from now. Meanwhile, have a lot of fun!</p>
]]></content:encoded>
			<wfw:commentRss>https://lizards.opensuse.org/2016/04/06/highlights-of-development-sprint-17/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>AMD Catalyst 15.12 for openSUSE – new makerpm-amd-script is available</title>
		<link>https://lizards.opensuse.org/2016/03/17/amd-catalyst-15-12-for-opensuse-new-makerpm-amd-script-is-available/</link>
		<comments>https://lizards.opensuse.org/2016/03/17/amd-catalyst-15-12-for-opensuse-new-makerpm-amd-script-is-available/#comments</comments>
		<pubDate>Thu, 17 Mar 2016 18:41:13 +0000</pubDate>
		<dc:creator><![CDATA[Sebastian Siebert]]></dc:creator>
				<category><![CDATA[Base System]]></category>
		<category><![CDATA[Desktop]]></category>
		<category><![CDATA[GNOME]]></category>
		<category><![CDATA[KDE]]></category>
		<category><![CDATA[Kernel]]></category>
		<category><![CDATA[Packaging]]></category>
		<category><![CDATA[X.org]]></category>
		<category><![CDATA[11.4]]></category>
		<category><![CDATA[12.1]]></category>
		<category><![CDATA[12.2]]></category>
		<category><![CDATA[12.3]]></category>
		<category><![CDATA[13.1]]></category>
		<category><![CDATA[13.2]]></category>
		<category><![CDATA[42.1]]></category>
		<category><![CDATA[amd]]></category>
		<category><![CDATA[ATI]]></category>
		<category><![CDATA[driver]]></category>
		<category><![CDATA[fglrx]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[openSUSE]]></category>
		<category><![CDATA[radeon]]></category>
		<category><![CDATA[rpm]]></category>
		<category><![CDATA[Tumbleweed]]></category>

		<guid isPermaLink="false">http://lizards.opensuse.org/?p=11773</guid>
		<description><![CDATA[AMD has released the new AMD Catalyst 15.12 (Radeon Crimson Edition). My script replaces the existing packaging script with an updated packaging script. It supports up to Kernel 4.5. (Official support up to Kernel 3.19) Important note: The driver does not work on openSUSE Tumbleweed. Unfortunately, the version of X-server is too new for the [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>AMD has released the new AMD Catalyst 15.12 (Radeon Crimson Edition). My script replaces the existing packaging script with an updated packaging script. It supports up to Kernel 4.5. (Official support up to Kernel 3.19)</p>
<p><strong>Important note:</strong> The driver does not work on openSUSE Tumbleweed. Unfortunately, the version of X-server is too new for the driver.</p>
<p>SHA1 is obsolete by now. The script used SHA256 for integrity of the downloaded files.</p>
<p>New Feature from packaging script:</p>
<ul>
<li>systemd support</li>
</ul>
<p>Resolved Issues:</p>
<ul>
<li>[SWDEV-82980] Ubuntu 15.10 fails when building the .deb packages</li>
</ul>
<p>Link: <a href="http://support.amd.com/en-us/kb-articles/Pages/AMDRadeonSoftwareCrimsonEdition15-12LINReleaseNotes.aspx">AMD Catalyst 15.12 Release Notes</a></p>
<p>Downloads:</p>
<ul>
<li>Script: <a href="https://www.sebastian-siebert.de/downloads/makerpm-amd-15.12.sh" target="_blank">makerpm-amd-15.12.sh</a></li>
<li>SHA1: <a href="https://www.sebastian-siebert.de/downloads/makerpm-amd-15.12.sh.sha256" target="_blank">makerpm-amd-15.12.sh.sha256</a></li>
</ul>
<p>Installation guide (English):<br />
<a href="http://en.opensuse.org/SDB:AMD_fglrx#Building_the_rpm_yourself">http://en.opensuse.org/SDB:AMD_fglrx#Building_the_rpm_yourself</a></p>
<p>Bruno Friedmann will build the new RPM packages in the fglrx repository. Stay tune!</p>
<p>If you find any issue with the driver. Don’t hesitate to contact me. I am in contact with AMD and can forward your issue to the right place. Feedback are welcome.</p>
<p>A report of your system is very helpful beside your feedback. You can generate it with the script:<br />
<code>su -c 'sh makerpm-amd-15.12.sh -ur'</code></p>
<p>Have a lot of fun!</p>
<p>Sebastian<br />
openSUSE member / Official AMD Packaging Script Maintainer for openSUSE<br />
German Blog: <a href="https://www.sebastian-siebert.de/2016/03/17/opensuse-proprietaeren-grafik-treiber-amd-catalyst-15-12-als-rpm-installieren/">openSUSE – proprietären Grafik-Treiber AMD Catalyst 15.12 als RPM installieren</a></p>
]]></content:encoded>
			<wfw:commentRss>https://lizards.opensuse.org/2016/03/17/amd-catalyst-15-12-for-opensuse-new-makerpm-amd-script-is-available/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>Highlights of development sprint 16</title>
		<link>https://lizards.opensuse.org/2016/03/15/highlights-of-development-sprint-16/</link>
		<comments>https://lizards.opensuse.org/2016/03/15/highlights-of-development-sprint-16/#comments</comments>
		<pubDate>Tue, 15 Mar 2016 16:28:16 +0000</pubDate>
		<dc:creator><![CDATA[Yast Team]]></dc:creator>
				<category><![CDATA[Distribution]]></category>
		<category><![CDATA[Factory]]></category>
		<category><![CDATA[Programming]]></category>
		<category><![CDATA[Systems Management]]></category>
		<category><![CDATA[YaST]]></category>

		<guid isPermaLink="false">http://lizards.opensuse.org/?p=11748</guid>
		<description><![CDATA[After three weeks of work, another development sprint is over. So time for another report for our fellow geckos. As usual, quite some time was invested in boring bug fixes and small non-obvious improvements, but we also have some interesting stuff to talk about. Improved UI for the encrypted partitioning proposal We wanted to talk [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>After three weeks of work, another development sprint is over. So time for another report for our fellow geckos. As usual, quite some time was invested in boring bug fixes and small non-obvious improvements, but we also have some interesting stuff to talk about.</p>
<h3>Improved UI for the encrypted partitioning proposal</h3>
<p>We wanted to talk about this feature not only because it has a visible impact in the user interface, but also because it&#8217;s a great example of collaboration among the different roles present in a Scrum Team. Formerly our Scrum development team was only formed by the developers of the YaST Team at SUSE. For this sprint (and future ones) the Scrum Team has been powered up with the addition of Ken Wimer as UI/UX expert and Jozef Pupava, one of the openQA.opensuse.org and openQA.suse.de operators.</p>
<p>We got a feature request to make encryption more visible in this dialog.</p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/03/28ea0408-e22b-11e5-8290-9ad25dd65776.png" rel="attachment wp-att-11753"><img src="//lizards.opensuse.org/wp-content/uploads/2016/03/28ea0408-e22b-11e5-8290-9ad25dd65776-225x300.png" alt="Old partitioning proposal dialog" width="225" height="300" class="aligncenter size-medium wp-image-11753" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/03/28ea0408-e22b-11e5-8290-9ad25dd65776-225x300.png 225w, http://lizards.opensuse.org/wp-content/uploads/2016/03/28ea0408-e22b-11e5-8290-9ad25dd65776.png 326w" sizes="(max-width: 225px) 100vw, 225px" /></a></p>
<p>Being software developers used to tools like Vim and Git, we have to admit that the YaST team found the dialog perfectly usable and was having hard times thinking on a better alternative. Fortunately, we now have a UI/UX expert able to bring better alternatives like this one we finally implemented.</p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/03/93288588-e22b-11e5-8d9e-d6190a2ad13b.png" rel="attachment wp-att-11755"><img src="//lizards.opensuse.org/wp-content/uploads/2016/03/93288588-e22b-11e5-8d9e-d6190a2ad13b-219x300.png" alt="New dialog for partitioning proposal" width="219" height="300" class="aligncenter size-medium wp-image-11755" /></a></p>
<p>This kind of visual changes in the installer used to cause delays in openQA, because adapting the tests while keeping the openQA machinery running is not always trivial. The great news is that it didn&#8217;t happen this time because our particular openQA superhero was already watching over our steps all along the process.</p>
<p>So welcome into our Scrum process, Ken and Jozef!</p>
<h3>System roles</h3>
<p>A new feature was added to the installer making it possible to quickly adjust several settings for the installation with one shot. You can see a detailed description of the feature, including several screenshots and configurations options <a href="https://github.com/yast/yast-installation/wiki/System-Role">in this wiki page</a> at the Github repository of yast2-installation. And yes, for the impatient we also have a glorious screenshot!</p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/03/460729c4-ea98-11e5-95e7-1a8d90729ff1.png" rel="attachment wp-att-11751"><img src="//lizards.opensuse.org/wp-content/uploads/2016/03/460729c4-ea98-11e5-95e7-1a8d90729ff1-300x231.png" alt="System Role dialog" width="300" height="231" class="aligncenter size-medium wp-image-11751" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/03/460729c4-ea98-11e5-95e7-1a8d90729ff1-300x231.png 300w, http://lizards.opensuse.org/wp-content/uploads/2016/03/460729c4-ea98-11e5-95e7-1a8d90729ff1.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<h3>Storage reimplementation: resizing partitions</h3>
<p>We have already explained in previous reports that we are performing an integral rewrite of the code managing partitioning and other storage tasks. During this sprint, the brand new library gained the ability to resize all kind of partitions (Linux, Windows, swap, etc.). It&#8217;s nothing that is going to hit the users in the short term but at least we have a couple of screenshots to see the premiere working (yes, we know that screenshots of terminals are not the most fancy stuff).</p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/03/shrink-vfat.png" rel="attachment wp-att-11758"><img src="//lizards.opensuse.org/wp-content/uploads/2016/03/shrink-vfat-300x195.png" alt="shrink-vfat" width="300" height="195" class="alignleft size-medium wp-image-11758" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/03/shrink-vfat-300x195.png 300w, http://lizards.opensuse.org/wp-content/uploads/2016/03/shrink-vfat.png 674w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/03/grow-ntfs.png" rel="attachment wp-att-11756"><img src="//lizards.opensuse.org/wp-content/uploads/2016/03/grow-ntfs-300x195.png" alt="grow-ntfs" width="300" height="195" class="alignright size-medium wp-image-11756" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/03/grow-ntfs-300x195.png 300w, http://lizards.opensuse.org/wp-content/uploads/2016/03/grow-ntfs.png 674w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p><br style="clear:both"></p>
<h3 style="clear:both">Installer self-update</h3>
<p>Starting on version 3.1.175, YaST is able to update itself during system installation. This feature will help to solve problems in the installer even after the media has been released. That&#8217;s a huge step towards improving YaST reliability.</p>
<p>The workflow is pretty simple: during system analysis YaST will search automatically for an update. If such update is found, YaST will download, verify (using GPG) and apply it. Finally, the installation will be resumed using the new version. Nice!</p>
<p>In the future, self update will be enabled by default. However, if for some reason you don&#8217;t want such a nice feature, you&#8217;re free to disable it. What is more: you can also craft your own update and use it instead the official one passing a custom URL to the installer.</p>
<p>If you&#8217;re curious, you can check the <a href="https://github.com/yast/yast-installation/blob/master/doc/SELF_UPDATE.md">technical details</a>.</p>
<h3>Storage reimplementation: the search for the perfect bootloader</h3>
<p>One of the goals of rewriting the storage layer was to make possible to cope with all the over-complicated requirements involved in the proposal of a good bootloader configuration. This time we don&#8217;t want the different scenarios to simply pop-up over time in a bug-report-oriented basis and start aggregating more and more branches to the existing code in order to support every one of those &#8220;new&#8221; scenarios.</p>
<p>Changes will come, for sure, but we need a solid ground based in experts knowledge to start building a flexible future-proof code to handle partitioning regarding bootloader. Thus, we started a round of contacts with several experts in all the hardware architectures supported by YaST in order to capture all the knowledge from their brains into a set of Ruby classes. It&#8217;s still a work in progress since squeezing people&#8217;s brains is not always easy, but we already have <a href="https://github.com/yast/yast-storage-ng/blob/master/doc/boot-partition.md">some preliminary document</a>.</p>
<h3>Consolidating continuous integration tools</h3>
<p>Continuous integration is a key aspect of software development, specially with methodologies like Scrum. Currently we use both <a href="https://travis-ci.org/">Travis</a> and <a href="http://jenkins-ci.org/">Jenkins</a> for it. Travis builds the pushed commits and pull requests at GitHub, while Jenkins takes care of the integration with the Open Build Service.</p>
<p>We are investing quite some effort trying to use Jenkins for everything. If you want to know more about the reasons or how the progress is going, check <a href="https://github.com/yast/yast.github.io/blob/master/doc/jenkins-integration.md">the detailed documentation</a>.</p>
<h3>And much more!</h3>
<p>As usual, this is just a small sample of the total work delivered by the team during the latest sprint (for Scrum and statistic&#8217;s lovers, it represents 34 story points out of a total of 87 delivered ones). Hopefully enough to keep you informed&#8230; and if it&#8217;s not, you know where you can reach us for more information!</p>
]]></content:encoded>
			<wfw:commentRss>https://lizards.opensuse.org/2016/03/15/highlights-of-development-sprint-16/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>TOSprint or not to sprint?</title>
		<link>https://lizards.opensuse.org/2016/02/27/tosprint-or-not-to-sprint/</link>
		<comments>https://lizards.opensuse.org/2016/02/27/tosprint-or-not-to-sprint/#comments</comments>
		<pubDate>Sat, 27 Feb 2016 18:19:44 +0000</pubDate>
		<dc:creator><![CDATA[Bruno Friedmann]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://lizards.opensuse.org/?p=11732</guid>
		<description><![CDATA[Report of a week of sprint TOSprint in Paris has just ended (wiki page). What a week! First of all I want to warmfully thank the sponsors, especially Olivier Courtin from Oslandia for the organization, and Mozilla France for hosting us. What is TOSprint? Once a year a bunch of hackers from projects under OsGeo [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><img src="https://wiki.osgeo.org/images/thumb/d/d1/Logo-TOSPrint_Paris.png/900px-Logo-TOSPrint_Paris.png" alt="TOSprint Paris 2016" style="width:200px;margin:18px;float:left" /><br />
<h2>Report of a week of sprint</h2>
<p>TOSprint in Paris has just ended (<a href="https://wiki.osgeo.org/wiki/Paris_Code_Sprint_2016">wiki page</a>).</p>
<p><b>What a week!</b></p>
<p>First of all I want to warmfully thank the sponsors, especially Olivier Courtin from Oslandia for the organization, and Mozilla France for hosting us.</p>
<h3>What is TOSprint?</h3>
<p>Once a year a bunch of hackers from projects under OsGeo umbrella, meet in a face to face sprint.<br />
This year it happenned in Paris with great number of participants (52).</p>
<p>There was globally five big groups, and if each community was running its own schedule,<br />
there was a lot of cross echanges too.</p>
<p><a href="https://flic.kr/p/ErD5E8"><img src="//lizards.opensuse.org/wp-content/uploads/2016/02/TOSprint_Paris_Mozilla.png" alt="TOSprint Mozilla" width="600" height="187" class="aligncenter size-full wp-image-11740" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/02/TOSprint_Paris_Mozilla-300x94.png 300w, http://lizards.opensuse.org/wp-content/uploads/2016/02/TOSprint_Paris_Mozilla.png 600w" sizes="(max-width: 600px) 100vw, 600px" /><br />
<caption>Mateusz Łoskot</caption>
<p></a></p>
<h3>Personal objectives</h3>
<p>My main objective, except being enough luckly to be a sponsor, was to go there and be in direct contact with upstream.</p>
<p>This can help a lot to improve packages, and create new ones.</p>
<p>Moreover, as one of my openSUSE&#8217;s Application:Geo peer maintainer, Angelos Kalkas was also participating, we decided to make somes changes, and improve the situation of the repository.</p>
<p><span id="more-11732"></span></p>
<h3>openSUSE packaging</h3>
<p>We were using a Staging repository to test the global changes to minimize the breakage on the main repo, kinda à la Factory <img src="https://s.w.org/images/core/emoji/72x72/1f609.png" alt="&#x1f609;" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>Let&#8217;s talk about what you will get once the rebuild will finished:<br />
<b>* gdal</b> goes to 2.0.2 which is big jump since version 1.11</p>
<p><b>* postgis</b> got upgrade to 2.2.1 with sfcgal as dependency so 3D operations are avalaible.</p>
<p>I added two interesting extensions for postgresql/postgis database<br />
 <b>&#8211; pgRouting :</b> a long time missing extension in our repository. see <a href="http://pgrouting.org/">pgrouting.org</a><br />
 <b>&#8211; pointcloud :</b> allow you to store and work with pointcloud in postgresql and also contain a postgis extension. see <a href="https://github.com/pgpointcloud/pointcloud">https://github.com/pgpointcloud/pointcloud</a><br />
Both packages are respecting the postgresql/postgis naming scheme: so to install pointcloud on a postgresql94 server you will install postgresql94-pointcloud package.<br />
They are available at least for 13.2, Leap 42.1, Tumbleweed.</p>
<p>A big thanks to Paul Ramsey for his help resolving the issues raised. Especially the advise to stick to -j1 during compilation of postgis <img src="https://lizards.opensuse.org/wp-includes/images/smilies/simple-smile.png" alt=":-)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p><b>* PDAL <a href="http://www.pdal.io/">pdal.io</a></b> (with libght) is a point cloud abstraction layer which is under active development and should<br />
in the future replace libLAS once the compatible C interface will be written.<br />
  A big thanks to Howard Butler, for helping to get all packaging issues resolved.</p>
<p><b>* Mapserver :</b> <a href="http://mapserver.org">mapserver.org</a><br />
During the week, mapserver team made impressive changes:<br />
 &#8211; First by closing numerous github issues which didn&#8217;t get updates for a long time.<br />
They run a bot script which automatically close the github issue, and users get a nice message about it.<br />
Perhaps it could inspire us, on how we write closing ticket in bugtriage.<br />
<a href="https://www.flickr.com/photos/139706282@N06/24936988840/in/album-72157664338100169/" title="OSGeo TOSprint Paris"><img src="https://farm2.staticflickr.com/1508/24936988840_183b1b805f_n.jpg" width="320" height="213" alt="OSGeo TOSprint Paris"></a></p>
<pre style="background:gray;color:white;font-style:italic">
  This is an automated comment

  This issue has been closed due to lack of activity. This doesn't mean the issue is invalid,
  it simply got no attention within the last year. Please reopen with missing/relevant information
  if still valid.

  Typically, issues fall in this state for one of the following reasons:

      Hard, impossible or not enough information to reproduce
      Missing test case
      Lack of a champion with interest and/or funding to address the issue
</pre>
<p> &#8211; Part of the team took the challenge to update all the tutorial material.<br />
 &#8211; A number of question about the future of mapscript : lacking maintenance resources (humans and or funding)<br />
 &#8211; Bugfix release on thursday night. 6.4.3 and 7.0.1</p>
<p>For openSUSE, I&#8217;ve been discussing a lot with Thomas Bonfort.<br />
The idea would be to be able to propose at least two or more versions that receive security and bug fixes. Actually the 6.4 and the 7.0 branches.<br />
This will allow people to smoothly upgrade their map files, when there&#8217;s breakage or adaptation needed.</p>
<p>I classify this request as a good idea, and started analyzing what we can do. So its actually a work in progress.</p>
<h3>Conclusion</h3>
<p>There&#8217;s nothing more enthusiastic (for me) than participating to a FLOSS event. If some days are more frustrating than others, the others serve to build this free world we all need.<br />
So I would like to ping your attention : <b> all FLOSS software and communities need your contribution </b>. If you&#8217;re using one of them, become interested in how it is built, organized, start to learn today how to contribute, and enjoy your journey.</p>
<p>There&#8217;s more to come, especially on the mapserver side, and more and more packages.<br />
Stay tuned!</p>
]]></content:encoded>
			<wfw:commentRss>https://lizards.opensuse.org/2016/02/27/tosprint-or-not-to-sprint/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Highlights of development sprint 15</title>
		<link>https://lizards.opensuse.org/2016/02/25/highlights-of-development-sprint-15/</link>
		<comments>https://lizards.opensuse.org/2016/02/25/highlights-of-development-sprint-15/#comments</comments>
		<pubDate>Thu, 25 Feb 2016 11:49:55 +0000</pubDate>
		<dc:creator><![CDATA[Yast Team]]></dc:creator>
				<category><![CDATA[Distribution]]></category>
		<category><![CDATA[Factory]]></category>
		<category><![CDATA[Programming]]></category>
		<category><![CDATA[Systems Management]]></category>
		<category><![CDATA[YaST]]></category>

		<guid isPermaLink="false">http://lizards.opensuse.org/?p=11707</guid>
		<description><![CDATA[We know you have missed the usual summary from the YaST trenches. But don&#8217;t panic, here you got it! As usual, we will only cover some highlights, saving you from the gory details of the not so exciting regular bugfixing. Package notifications libzypp has a nice feature that enables packages to display notifications when they’re [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>We know you have missed the usual summary from the YaST trenches. But don&#8217;t panic, here you got it! As usual, we will only cover some highlights, saving you from the gory details of the not so exciting regular bugfixing.</p>
<h3>Package notifications</h3>
<p>libzypp has a nice feature that enables packages to display notifications when they’re installed/upgraded. Zypper takes advantages of this feature and shows that information when a package is installed/upgraded. For example, if you install <code>mariadb</code> package, Zypper will inform you about setting up a database root password and so on.</p>
<p>If you installed any of those packages with YaST, you missed that piece of information… until now! Starting on <code>yast2 3.1.175</code> YaST will show packages notifications.</p>
<p><img class="aligncenter" src="https://cloud.githubusercontent.com/assets/15836/13257232/e7e23058-da45-11e5-8e7d-b116f47c686c.png" alt="installation-messages-qt" /></p>
<p><img class="aligncenter" src="https://cloud.githubusercontent.com/assets/15836/13257235/ea6ecade-da45-11e5-91ff-579cb257b859.png" alt="installation-messages-ncurses" /></p>
<p>The only exception is when doing a regular installation (or autoinstallation), as we want to show as few dialogs as possible.</p>
<h3>Registration Codes from a USB Stick</h3>
<p>During the installation of a SUSE Linux Enterprise product, you are asked for a registration code. Previously you had to remember it and type it by hand. Now the code can be read from USB storage.</p>
<p><img src="https://cloud.githubusercontent.com/assets/102056/13245125/4e0bf5de-da0b-11e5-839a-9d8d70052149.png" alt="regcode-from-usb" /><br />
<img src="https://cloud.githubusercontent.com/assets/102056/13255345/127cc83c-da46-11e5-97b5-bc6365361cfd.png" alt="regcode-from-usb-extensions" /></p>
<p>Insert a USB stick at installation boot time or at the latest before you proceed from the first installation screen (Language, Keyboard and License Agreement). That stick should contain the registration codes either at <code>/regcodes.txt</code> or at <code>/regcodes.xml</code>. In the registration dialogs, the input fields will be prefilled.</p>
<p>The syntax of the files is as follows. In the file identify the product with the name quoted by <code>zypper search --type product</code> or <code>SUSEConnect --list-extensions</code> (without the /version/architecture part).</p>
<p>regcodes.txt:
<pre>
SLES    cc36aae1
SLED    309105d4

sle-we  5eedd26a
sle-live-patching 8c541494
</pre>
<p>regcodes.xml: (xml wins if both xml and txt are present)
<pre>
&lt;?xml version="1.0"?&gt;
&lt;profile xmlns="http://www.suse.com/1.0/yast2ns" xmlns:config="http://www.suse.com/1.0/configns"&gt;
  &lt;suse_register&gt;
    &lt;!-- See https://www.suse.com/documentation/sles-12/singlehtml/book_autoyast/book_autoyast.html#CreateProfile.Register.Extension --&gt;
    &lt;addons config:type="list"&gt;
      &lt;addon&gt;
        &lt;!-- Name of add-on as listed by "zypper search --type product" --&gt;
        &lt;name&gt;sle-we&lt;/name&gt;
        &lt;reg_code&gt;5eedd26a&lt;/reg_code&gt;
      &lt;/addon&gt;
      &lt;addon&gt;
        &lt;name&gt;sle-live-patching&lt;/name&gt;
        &lt;reg_code&gt;8c541494&lt;/reg_code&gt;
      &lt;/addon&gt;
      &lt;addon&gt;
        &lt;!-- SLES is not an add-on but listing it here allows for combining
             several base product registration codes in a single file --&gt;
        &lt;name&gt;SLES&lt;/name&gt;
        &lt;reg_code&gt;cc36aae1&lt;/reg_code&gt;
      &lt;/addon&gt;
      &lt;addon&gt;
        &lt;name&gt;SLED&lt;/name&gt;
        &lt;reg_code&gt;309105d4&lt;/reg_code&gt;
      &lt;/addon&gt;
    &lt;/addons&gt;
  &lt;/suse_register&gt;
&lt;/profile&gt;
</pre>
<p></p>
<h3>Lot of Btrfs-related improvements in the expert partitioner</h3>
<p>We also invested quite some time improving the support for Btrfs in the expert partitioner. Implementing one requested feature and closing five bugs.</p>
<p>The following animation shows the feature #320296 (user friendly handling of subvolumes) in action, together with the fix to 965279 (Btrfs settings always overridden with default values).</p>
<p><img src="//lizards.opensuse.org/wp-content/uploads/2016/02/subvolumes-opt.gif" alt="subvolumes-opt" class="aligncenter" /></a></p>
<p>But we have even more screenshots and animations for the improvements in the expert partitioner. In the description of <a href="https://github.com/yast/yast-storage/pull/190">this pull request</a>, you have screenshots displaying the new dialog that was implemented to fix bug#928641. And in <a href="https://github.com/yast/yast-storage/pull/186">this other pull request</a>, you can see in action the fixes for bug#944252 (snapshots were offered for partitions other than root) and for bug#954691 (fstab options being forgotten for Btrfs partitions).</p>
<h3>Improving testability of the new storage code</h3>
<p>In recent posts, we reported how we are about to refactor the storage subsystem of YaST. The improved partition proposal for installation <a href="https://lizards.opensuse.org/2016/02/03/highlights-of-development-sprint-14/">presented in the previous summary</a> performs a lot of operations &#8211;  like analyzing what disks are there and what is on each one of them, checking if there already is enough free space and making a best guess on what partitions may be candidates to be removed to make space for a new Linux installation.</p>
<p>If there are many disks with many partitions, this can get complicated really quickly. So we need a reliable way to test it. Thus, we created a testing framework to build fake storage hardware (disks) with fake partitions and file systems. Although it&#8217;s fake hardware (we can&#8217;t create hard disks out of thin air&#8230; yet), it enables us to do unit tests without setting up virtual machines. With those tests we can cover a lot more scenarios that would otherwise be really difficult to test, with one or many disks, with many partitions of different kinds, with a previously existing RAID array or whatever.</p>
<p>One nice thing about the new libstorage is that it operates on &#8220;device graphs&#8221; that can be transformed into the GraphViz format for easy visualization. Here you have a nice diagram generated by libstorage based on some fake hardware created from <a href="https://gist.github.com/ancorgs/014c34c3c74b9949f3a2">this YAML specification</a>.</p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/02/fake-devicegraphs.png" rel="attachment wp-att-11723"><img src="//lizards.opensuse.org/wp-content/uploads/2016/02/fake-devicegraphs-300x136.png" alt="fake-devicegraphs" width="300" height="136" class="aligncenter size-medium wp-image-11723" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/02/fake-devicegraphs-300x136.png 300w, http://lizards.opensuse.org/wp-content/uploads/2016/02/fake-devicegraphs.png 763w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<h3>Better handling of wrong registration code for extensions</h3>
<p>We also spent some time improving the usability of the section for registration of extensions and modules. Now if the user selects several modules and the registration of some of them fails, the user will be kindly redirected back to the same dialog but only with inputs for the unregistered ones. From there, they can go back to unselect the failing extensions or retry with different (or even with the same) codes.</p>
<h3>Say goodbye to the &#8220;receive system mail&#8221; checkbox</h3>
<p>As the last step of the improvements done to the user creation dialog (see the <a href="https://lizards.opensuse.org/?p=11673">previous post</a> for more details). We removed the long-ago meaningless checkbox titled &#8220;Receive System Mail&#8221;. That leaded to the removal of quite some code&#8230; and removing code is usually a good thing. <img src="https://lizards.opensuse.org/wp-includes/images/smilies/simple-smile.png" alt=":-)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<h3>Many other things</h3>
<p>As usual, this is just a short summary with some highlights. Many other stuff was implemented and several other bugs were fixed but, you know, we cannot blog about everything if we want to invest some time in debugging and coding. <img src="https://lizards.opensuse.org/wp-includes/images/smilies/simple-smile.png" alt=":-)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>See you in the highlights for next sprint, in around three weeks.</p>
<p>PS.- If you want to be part of the fun, take a look to the YaST-related summer projects we have on the <a href="http://101.opensuse.org/">openSUSE mentoring page</a>.</p>
]]></content:encoded>
			<wfw:commentRss>https://lizards.opensuse.org/2016/02/25/highlights-of-development-sprint-15/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Sugar on openSUSE</title>
		<link>https://lizards.opensuse.org/2016/02/17/sugar-on-opensuse/</link>
		<pubDate>Wed, 17 Feb 2016 14:25:18 +0000</pubDate>
		<dc:creator><![CDATA[Jigish Gohil]]></dc:creator>
				<category><![CDATA[Derivative]]></category>
		<category><![CDATA[Desktop]]></category>
		<category><![CDATA[Distribution]]></category>
		<category><![CDATA[Education]]></category>
		<category><![CDATA[Packaging]]></category>

		<guid isPermaLink="false">http://lizards.opensuse.org/?p=11705</guid>
		<description><![CDATA[Built openSUSE Leap based Sugar test images on SUSE Studio, get it from here. If you wish to get involved with the project maintaining packages, fixing/reporting bugs, follow the links on the X11:Sugar build service project page.]]></description>
				<content:encoded><![CDATA[<p>Built openSUSE Leap based <a href="https://www.sugarlabs.org/">Sugar</a> test images on SUSE Studio, <a href="https://susestudio.com/a/F78UZ4/sugarsuse-leap-42-1">get it from here</a>.</p>
<p>If you wish to get involved with the project maintaining packages, fixing/reporting bugs, follow the links on the <a href="https://build.opensuse.org/project/show/X11:Sugar">X11:Sugar</a> build service project page.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Highlights of development sprint 14</title>
		<link>https://lizards.opensuse.org/2016/02/03/highlights-of-development-sprint-14/</link>
		<comments>https://lizards.opensuse.org/2016/02/03/highlights-of-development-sprint-14/#comments</comments>
		<pubDate>Wed, 03 Feb 2016 08:08:15 +0000</pubDate>
		<dc:creator><![CDATA[Yast Team]]></dc:creator>
				<category><![CDATA[Distribution]]></category>
		<category><![CDATA[Factory]]></category>
		<category><![CDATA[Programming]]></category>
		<category><![CDATA[Systems Management]]></category>
		<category><![CDATA[YaST]]></category>

		<guid isPermaLink="false">http://lizards.opensuse.org/?p=11673</guid>
		<description><![CDATA[Another three weeks period and another report from the YaST Team (if you don&#8217;t know what we are talking about, see highlights of sprint 13 and the presentation post). This was actually a very productive sprint although, as usual, not all changes have such an obvious impact on final users, at least in the short [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Another three weeks period and another report from the YaST Team (if you don&#8217;t know what we are talking about, see <a href="https://lizards.opensuse.org/2016/01/07/highlights-of-development-sprint-13/">highlights of sprint 13</a> and the <a href="https://lizards.opensuse.org/2015/12/15/lets-blog-about-yast/">presentation post</a>). This was actually a very productive sprint although, as usual, not all changes have such an obvious impact on final users, at least in the short term.</p>
<h3>Redesign and refactoring of the user creation dialog</h3>
<p>One of the most visible changes, at least during the installation process, is the revamped dialog for creating local users. There is a full screenshots-packed description of the original problems (at usability and code levels) and the implemented solution in the <a href="https://github.com/yast/yast-users/pull/84">description of this pull request</a> at Github.com.</p>
<p>Spoilers: the new dialog looks like the screenshot below and the openSUSE community now needs to decide the default behavior we want for Tumbleweed regarding password encryption methods. To take part in that discussion, read the mentioned description and reply to <a href="http://lists.opensuse.org/opensuse-factory/2016-01/msg00496.html">this thread</a> in the openSUSE Factory mailing list.</p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/02/b12a8f90-c51b-11e5-9ceb-659b6c77bac4.png" rel="attachment wp-att-11675"><img src="//lizards.opensuse.org/wp-content/uploads/2016/02/b12a8f90-c51b-11e5-9ceb-659b6c77bac4-300x225.png" alt="b12a8f90-c51b-11e5-9ceb-659b6c77bac4" width="300" height="225" class="aligncenter size-medium wp-image-11675" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/02/b12a8f90-c51b-11e5-9ceb-659b6c77bac4-300x225.png 300w, http://lizards.opensuse.org/wp-content/uploads/2016/02/b12a8f90-c51b-11e5-9ceb-659b6c77bac4-768x576.png 768w, http://lizards.opensuse.org/wp-content/uploads/2016/02/b12a8f90-c51b-11e5-9ceb-659b6c77bac4.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>Beyond the obvious changes for the final user, the implementation of the new dialogs resulted in a much cleaner and more tested code base, including a new <a href="http://www.rubydoc.info/github/yast/yast-yast2/UI/InstallationDialog">reusable class</a> to greatly streamline the development of new installation dialogs in the future.</p>
<h3>One step further in the new libstorage: installation proposal</h3>
<p>In the highlights of the previous sprint, we already explained the YaST team is putting a lot of effort in rewriting the layer that access to disks, partitions, volumes and all that. One important milestone in such rewrite is the ability to examine a hard disk with a complex partitioning schema (including MS Windows partitions, a Linux installation and so on) and propose the operations that need to be performed in order to install (open)SUSE. It&#8217;s a more complex topic that it could look at the first glance.</p>
<p>During this sprint we created a command line tool that can perform that task. Is still not part of the installation process and will take quite some time until it gets there, but it&#8217;s already a nice showcase of the capabilities of the new library.</p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/02/new-storage-proposal-2016-01-27-1900-1.png" rel="attachment wp-att-11682"><img src="//lizards.opensuse.org/wp-content/uploads/2016/02/new-storage-proposal-2016-01-27-1900-1.png" alt="new-storage-proposal-2016-01-27-1900" width="738" height="636" class="aligncenter size-full wp-image-11682" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/02/new-storage-proposal-2016-01-27-1900-1-300x259.png 300w, http://lizards.opensuse.org/wp-content/uploads/2016/02/new-storage-proposal-2016-01-27-1900-1.png 738w" sizes="(max-width: 738px) 100vw, 738px" /></a><br />
</p>
<h3>Fixed a crash when EULA download fails</h3>
<p>If a download error occurred during the installation of any module or extension requiring an EULA, YaST simply exited after displaying a pop-up error, as you can see here.</p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/02/0c444926-bb75-11e5-8e6e-029d018c14d3.gif" rel="attachment wp-att-11684"><img src="//lizards.opensuse.org/wp-content/uploads/2016/02/0c444926-bb75-11e5-8e6e-029d018c14d3.gif" alt="0c444926-bb75-11e5-8e6e-029d018c14d3" width="700" height="616" class="aligncenter size-full wp-image-11684" /></a></p>
<p>Now the workflow goes back to the extension selection, to retry or to deselect the problematic extension. Just like this.</p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/02/46fb22a6-bb75-11e5-9830-aff1d516e77e.gif" rel="attachment wp-att-11686"><img src="//lizards.opensuse.org/wp-content/uploads/2016/02/46fb22a6-bb75-11e5-9830-aff1d516e77e.gif" alt="46fb22a6-bb75-11e5-9830-aff1d516e77e" width="702" height="623" class="aligncenter size-full wp-image-11686" /></a></p>
<p></p>
<h3>Continuous integration for Snapper and (the current) libstorage</h3>
<p><a href="https://github.com/openSUSE/snapper">Snapper</a> and <a href="https://github.com/openSUSE/libstorage/">libstorage</a> now build the Git “master” branch continuously on <a href="http://ci.opensuse.org">ci.opensuse.org</a> (<a href="https://ci.opensuse.org/job/snapper-master/">S</a>, <a href="https://ci.opensuse.org/job/libstorage-master/">L</a>), and commit a passing build to the OBS development project (<a href="https://build.opensuse.org/package/show/YaST:Head/snapper">S</a>, <a href="https://build.opensuse.org/package/show/YaST:Head/libstorage">L</a>), and if the version number has changed, submit the package to Factory (<a href="https://build.opensuse.org/package/show/openSUSE:Factory/snapper">S</a>, <a href="https://build.opensuse.org/package/show/openSUSE:Factory/libstorage">L</a>).</p>
<p>The same set-up works on <a href="http://ci.suse.de">ci.suse.de</a> (<a href="https://ci.suse.de/job/snapper-master/">S</a>, <a href="https://ci.suse.de/job/libstorage-master/">L</a>), committing to the SUSE&#8217;s internal OBS instance (<a href="https://build.suse.de/package/show/Devel:YaST:Head/snapper">S</a>, <a href="https://build.suse.de/package/show/Devel:YaST:Head/libstorage">L</a>) and submitting to the future SLE12-SP2 (<a href="https://build.suse.de/package/show/SUSE:SLE-12-SP2:GA/snapper">S</a>, <a href="https://build.suse.de/package/show/SUSE:SLE-12-SP2:GA/libstorage">L</a>).</p>
<p>This brings these two packages up to the level of automation that the YaST team uses for the yast2-* packages, and allows releasing simple fixes even by team members who do not work on these packages regularly.</p>
<h3>Disk usage stats in installation and software manager: do not list subvolumes</h3>
<p>While installing software, YaST provides a visual overview of the free space in the different mount points of the system. With Btrfs and its subvolumes feature, the separation between a physical disk and its mount point is not that clear anymore. That resulted in wrong reports in YaST, like the one displayed in the left bottom corner of this screen.</p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/02/broken-disk-usage.png" rel="attachment wp-att-11695"><img src="//lizards.opensuse.org/wp-content/uploads/2016/02/broken-disk-usage.png" alt="broken-disk-usage" width="681" height="468" class="aligncenter size-full wp-image-11695" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/02/broken-disk-usage-300x206.png 300w, http://lizards.opensuse.org/wp-content/uploads/2016/02/broken-disk-usage.png 681w" sizes="(max-width: 681px) 100vw, 681px" /></a></p>
<p>The actual calculation of free space is performed by libzypp (the Zypper library), YaST only takes care of rendering the result of that calculation in the screen. Thus, we closely collaborated with the Zypper developer, Michael Andres, to teach libzypp how to deal with Btrfs subvolumes. Thanks to his work, with any version of libzypp &gt;= 15.21 (already available in Tumbleweed), you can enjoy an error-free disk usage report.</p>
<p><a href="//lizards.opensuse.org/wp-content/uploads/2016/02/fixed-disk-usage.png" rel="attachment wp-att-11696"><img src="//lizards.opensuse.org/wp-content/uploads/2016/02/fixed-disk-usage.png" alt="fixed-disk-usage" width="681" height="468" class="aligncenter size-full wp-image-11696" srcset="http://lizards.opensuse.org/wp-content/uploads/2016/02/fixed-disk-usage-300x206.png 300w, http://lizards.opensuse.org/wp-content/uploads/2016/02/fixed-disk-usage.png 681w" sizes="(max-width: 681px) 100vw, 681px" /></a></p>
<p>To ensure we have no regressions, the YaST team also contributed a new test to openQA. See it <a href="https://openqa.opensuse.org/tests/117876/modules/yast2_i/steps/7">in action</a>.</p>
<h3>Cleanup dependencies in YaST systemd services</h3>
<p>We have received several bug reports about problems executing AutoYaST or YasT2-Firstboot in combination with complex network settings or third party services&#8230; and even in some simple scenarios. Many of these problems boil down to a single culprit &#8211; the dependencies of the YaST related systemd units.</p>
<p>During this sprint we have simplified the unit files for Tumbleweed and SLE, as you can see in <a href="https://github.com/yast/yast-installation/pull/332/files">this pull request</a>. It&#8217;s a small change but with a huge impact and several implications, so a lot of time was invested into testing during the sprint. The problems seem to be gone, but more AutoYaST and YaST-Firstboot testing would be highly appreciated.</p>
<h3>Many other things</h3>
<p>As usual, this is only a brief collection of highlights of all the job done during the sprint. Using Scrum terminology, this represents only 27 story points out of a total of 81 story points delivered by the team during this sprint. Using more mundane words, this is just a third part of what we have achieved during the last three weeks.</p>
<p>Hopefully, enough to keep you entertained until the next report in other three weeks!</p>
]]></content:encoded>
			<wfw:commentRss>https://lizards.opensuse.org/2016/02/03/highlights-of-development-sprint-14/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
	</channel>
</rss>
